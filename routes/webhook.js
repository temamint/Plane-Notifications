const express = require('express');
const router = express.Router();
const { verifySignature } = require('../utils/verifySignature');
const { formatIssueMessage, formatCommentMessage } = require('../utils/botNotificationFormatter');
const { sendTelegramMessage } = require('../utils/telegram');
const { ensureProjectsLoaded } = require('../utils/projectServices');
const { getTelegramIdByPlaneUserId } = require('../utils/userService');
const { isDuplicateEvent } = require('../utils/webhookDeduplicator');

router.post('/', express.raw({ type: 'application/json' }), async (req, res) => {
	const eventId = req.headers['x-plane-event-id'] || 'no-event-id';
	console.log(`üì© Webhook Event ID: ${eventId}`);

	console.log('üì© –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫:', req.headers, req.body);

	if (!verifySignature(req)) {
		return res.status(403).send('–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å');
	}

	try {
		await ensureProjectsLoaded();

		const parsedBody = JSON.parse(req.body.toString());
		const { event, action, data } = parsedBody;

		if (await isDuplicateEvent({ event, action, data })) {
			console.log(`‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è (${eventId}), –∏–≥–Ω–æ—Ä`);
			return res.status(200).send('Duplicate event ignored');
		}


		let message;
		switch (event) {
			case 'issue':
				message = await formatIssueMessage(action, data);
				break;
			case 'issue_comment':
				message = await formatCommentMessage(action, data);
				break;
			default:
				message = `üö´ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: *${event}*`;
		}

		if (event === 'issue' && data?.id) {
			const userIds = new Set();

			(data.assignees || []).forEach(assignee => {
				if (assignee?.id) userIds.add(assignee.id);
			});

			if (data.created_by) {
				userIds.add(data.created_by);
			}

			console.log('üßë‚Äçüíª –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ assignees –∏ author):', [...userIds]);

			let sentCount = 0;
			for (const planeUserId of userIds) {
				const tgId = getTelegramIdByPlaneUserId(planeUserId);
				if (tgId) {
					await sendTelegramMessage(message, tgId);
					sentCount++;
				}
			}
			console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);

			return res.status(200).send(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount}`);
		} else {
			await sendTelegramMessage(message);
			res.status(200).send('–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
		res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞');
	}
});

module.exports = router;