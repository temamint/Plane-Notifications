const express = require('express');
const router = express.Router();
const { verifySignature } = require('../utils/verifySignature');
const { formatIssueMessage, formatCommentMessage } = require('../utils/botNotificationFormatter');
const { ensureProjectsLoaded, getProjectIdentifierById } = require('../utils/projectServices');
const { getTelegramIdByPlaneUserId } = require('../utils/userService');
const { isDuplicateEvent } = require('../utils/webhookDeduplicator');
const { addNotification, setTimer, getTimer, clearTimer } = require('../utils/notificationBuffer');
const { sendSummaryNotification } = require('../utils/telegram');

router.post('/', express.raw({ type: 'application/json' }), async (req, res) => {
	console.log('üì© –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫:', req.headers, req.body);

	if (!verifySignature(req)) {
		return res.status(403).send('–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å');
	}

	try {
		await ensureProjectsLoaded();

		const parsedBody = JSON.parse(req.body.toString());
		const { event, action, data } = parsedBody;

		console.log(`–í–û–¢ –î–ê–¢–ê: ${JSON.stringify(data)}`);

		if (await isDuplicateEvent({ event, action, data })) {
			return res.status(200).send('Duplicate event ignored');
		}

		let issueKey = '???';
		if (event === 'issue' && data?.sequence_id && data?.project) {
			const pid = await getProjectIdentifierById(data.project);
			issueKey = `${pid}-${data.sequence_id}`;
		}

		if (event === 'issue' && data?.id) {
			const userIds = new Set();

			(data.assignees || []).forEach(assignee => {
				if (assignee?.id) userIds.add(assignee.id);
			});
			if (data.created_by) {
				userIds.add(data.created_by);
			}

			console.log('üßë‚Äçüíª –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', [...userIds]);

			let sentCount = 0;
			for (const planeUserId of userIds) {
				const tgId = getTelegramIdByPlaneUserId(planeUserId);
				if (tgId) {
					try {
						await addNotification(tgId, {
							issueId: data.id,
							issueKey,
							title: data.name,
							emoji: action === 'created' ? 'üÜï' : '‚úèÔ∏è'
						});
					} catch (err) {
						console.error(`‚ùå –û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è ${tgId}:`, err.message);
						continue;
					}

					// –¢–∞–π–º–µ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä–∞ –Ω–µ—Ç ‚Äî —Å—Ç–∞–≤–∏–º –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
					if (!getTimer(tgId)) {
						const timeoutId = setTimeout(async () => {
							try {
								await sendSummaryNotification(tgId);
							} catch (e) {
								console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', e);
							}
							clearTimer(tgId);
						}, 5000);
						setTimer(tgId, timeoutId);
					}

					sentCount++;
				}
			}
			console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É—Ñ–µ—Ä ${sentCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
			return res.status(200).send(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount}`);
		} else if (event === 'issue_comment') {
			// –ø–æ–∫–∞ –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ–±—â–∏–π —á–∞—Ç (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å)
			const message = await formatCommentMessage(action, data);
			// TODO: —Ç–æ–∂–µ –º–æ–∂–Ω–æ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ DEFAULT_CHAT_ID
			console.log('üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', message);
		} else {
			console.log('‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:', event);
		}

		res.status(200).send('–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
		res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞');
	}
});

module.exports = router;
