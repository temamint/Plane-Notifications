// utils/projectMembersService.js
const { planeApi } = require('./planeApi');
require('dotenv').config();

const memberCache = new Map();
const CACHE_TTL = 5 * 60 * 1000;

function isCacheFresh(entry) {
	return entry && (Date.now() - entry.timestamp < CACHE_TTL);
}

async function fetchProjectMembers(projectId) {
	console.log('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∫—ç—à–∞...');
	const cached = memberCache.get(projectId);
	console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–∑ –∫—ç—à–∞: ${cached?.userMap ? [...cached.userMap.values()].join(', ') : '–Ω–µ—Ç'}`);
	if (isCacheFresh(cached)) {
		console.log('üì¶ –ö—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω');
		return cached.userMap;
	}

	try {
		const response = await planeApi.get(`/workspaces/${process.env.PLANE_WORKSPACE_SLUG}/projects/${projectId}/members/`);
		const members = response.data || [];

		console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏: ${members}`);

		const userMap = new Map();
		members.forEach(member => {
			if (member && member.id) {
				const fullName = `${member.first_name} ${member.last_name} (${member.display_name})`.trim();
				userMap.set(member.id, fullName || `Unknown (${member.id})`);
			}
		});

		memberCache.set(projectId, {
			timestamp: Date.now(),
			userMap
		});

		return userMap;
	} catch (err) {
		console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}:`, err.message);
		return new Map();
	}
}

async function getUserName(projectId, userId) {
	const projectCache = await fetchProjectMembers(projectId);
	return projectCache.get(userId) || `Unknown (${userId})`;
}

module.exports = {
	getUserName,
};
