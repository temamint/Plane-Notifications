const TurndownService = require('turndown');
const turndownService = new TurndownService();
const { getProjectIdentifierById } = require('./projectServices');
const { getUserName } = require('./projectMemberServices');
const { getIssueActivities, extractLatestFieldChanges } = require('./issueActivityService');

function getIssueTitle(action) {
	switch (action) {
		case 'created': return 'üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞';
		case 'updated': return '‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏';
		case 'deleted': return 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞';
		default: return `*ISSUE* ‚Äî ${action}`;
	}
}

function getCommentTitle(action) {
	switch (action) {
		case 'created': return 'üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π';
		case 'updated': return '‚úèÔ∏è –û–±–Ω–æ–≤–ª—ë–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π';
		case 'deleted': return 'üóëÔ∏è –£–¥–∞–ª—ë–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π';
		default: return `*COMMENT* (${action})`;
	}
}


async function formatIssueMessage(action, data) {
	let description = 'N/A';
	if (typeof data.description_html === 'string' && data.description_html.trim()) {
		description = turndownService.turndown(data.description_html);
	} else if (typeof data.description_stripped === 'string') {
		description = data.description_stripped;
	}

	const MAX_DESCRIPTION_LENGTH = 500;
	if (description.length > MAX_DESCRIPTION_LENGTH) {
		description = description.slice(0, MAX_DESCRIPTION_LENGTH) + '...';
	}

	const title = getIssueTitle(action);
	const projectIdentifier = await getProjectIdentifierById(data.project);
	const issueKey = `${projectIdentifier}-${data.sequence_id}`;
	const issueUrl = `https://app.plane.so/${process.env.PLANE_WORKSPACE_SLUG}/browse/${issueKey}/`;

	const activities = await getIssueActivities(data.project, data.id);
	console.log(`üì¶ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –∑–∞–¥–∞—á–µ ${issueKey}:`, activities);
	const changes = extractLatestFieldChanges(activities);

	let changesText = changes ? changes : '–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π';

	const message = `${title}
*–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:* ${data.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} ([${issueKey}](${issueUrl}))
*–û–ø–∏—Å–∞–Ω–∏–µ:* ${description}
*–ê–≤—Ç–æ—Ä:* ${await getUserName(data.project, data.updated_by)}

*üõ† –ò–∑–º–µ–Ω–µ–Ω–∏—è:* ${changesText}`;

	console.log(`–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message}`);

	return message;
}

async function formatCommentMessage(action, data) {
	const content = typeof data.comment_stripped === 'object'
		? JSON.stringify(data.comment_stripped, null, 2)
		: data.comment_stripped || '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–µ–∑ —Ç–µ–∫—Å—Ç–∞';

	const title = getCommentTitle(action);

	return `${title}
*–ê–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:* ${await getUserName(data.project, data.created_by)}
*–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:* ${content}`;
}

module.exports = {
	formatIssueMessage,
	formatCommentMessage
};