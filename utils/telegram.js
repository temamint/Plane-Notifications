const bot = require('../bot');
const {
	getNotifications,
	getLastMessage,
	setLastMessage,
	markNotificationsAsSent
} = require('./notificationBuffer');
const { escapeMarkdown } = require('./markdownFormatter');

const TELEGRAM_MESSAGE_LIMIT = 4096;

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
 * @param {number} chatId ‚Äî –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
 */
async function sendSummaryNotification(chatId) {
	let notifs;
	try {
		notifs = await getNotifications(chatId, ['unread', 'sent']);
	} catch (err) {
		console.error(`‚ùå –û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ${chatId}:`, err.message);
		return;
	}
	if (!notifs || !notifs.length) {
		console.log(`‚ÑπÔ∏è –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç ${chatId}`);
		return;
	}

	// –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ issueId (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ)
	const unique = {};
	notifs.forEach(n => {
		unique[n.issue_id] = n;
	});
	notifs = Object.values(unique);

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
	const lastMessageId = getLastMessage(chatId);
	if (lastMessageId) {
		try {
			await bot.deleteMessage(chatId, lastMessageId);
			console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ${lastMessageId}`);
		} catch (err) {
			console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${lastMessageId} –≤ —á–∞—Ç–µ ${chatId}:`, err.message);
		}
	}

	const textBlocks = [];
	let current = `üîî *${notifs.length} –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:*\n\n`;
	for (const n of notifs) {
		const line = `‚Ä¢ ${n.emoji || 'üìù'} *${escapeMarkdown(n.issue_key)}* ‚Äî ${escapeMarkdown(n.title)}\n`;
		if ((current + line).length > TELEGRAM_MESSAGE_LIMIT) {
			textBlocks.push(current);
			current = '';
		}
		current += line;
	}
	if (current) textBlocks.push(current);

	const buttons = [
		...notifs.map(n => [{ text: `üìÑ ${n.issue_key}`, callback_data: `detail_${n.issue_id}` }]),
		[{ text: 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—ë', callback_data: `view_all` }],
		[{ text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close_summary' }]
	];

	let messageId = null;
	try {
		for (let i = 0; i < textBlocks.length; i++) {
			const opts = {
				parse_mode: 'Markdown',
			};
			if (i === textBlocks.length - 1) {
				opts.reply_markup = { inline_keyboard: buttons };
			}
			const message = await bot.sendMessage(chatId, textBlocks[i], opts);
			if (i === textBlocks.length - 1) {
				messageId = message.message_id;
			}
		}
		if (messageId) setLastMessage(chatId, messageId);
		console.log(`‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: ${messageId}) –≤ —á–∞—Ç ${chatId}`);
	} catch (err) {
		console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`, err.message);
		// TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ rate limit –∏–ª–∏ –æ—à–∏–±–∫–∞—Ö Telegram
		return;
	}

	try {
		await markNotificationsAsSent(chatId, notifs.map(n => n.id));
	} catch (err) {
		console.error(`‚ùå –û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–ª—è ${chatId}:`, err.message);
	}
}

module.exports = {
	sendSummaryNotification
};
