const crypto = require('crypto');
const { supabase } = require('./supabaseClient');

function getEventFingerprint({ event, action, data }) {
	if (!data?.id) {
		console.log('‚ùó –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å fingerprint ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç data.id');
		return null;
	}

	const raw = [
		event,
		action,
		data.id,
		data.status,
		JSON.stringify((data.assignees || []).map(a => a.id).sort())
	].join('::');

	const hash = crypto.createHash('md5').update(raw).digest('hex');
	console.log(`üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω fingerprint: ${hash} ‚Üê (${raw})`);
	return hash;
}

async function isDuplicateEvent(payload) {
	const fingerprint = getEventFingerprint(payload);
	if (!fingerprint) return false;

	const { data, error } = await supabase
		.from('deduplicated_events')
		.select('fingerprint')
		.eq('fingerprint', fingerprint)
		.maybeSingle();

	if (data) {
		console.log(`‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è: ${fingerprint}`);
		return true;
	}

	const { error: insertError } = await supabase
		.from('deduplicated_events')
		.insert({ fingerprint });

	if (insertError) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ fingerprint:', insertError);
		return false; // fail-open: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞—â–∏—Ç—É, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
	}

	console.log(`‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∑–∞–ø–∏—Å–∞–Ω–æ: ${fingerprint}`);
	return false;
}

module.exports = {
	isDuplicateEvent,
	getEventFingerprint,
};
