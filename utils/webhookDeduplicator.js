const crypto = require('crypto');

// ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π shared Set (–¥–ª—è Vercel –∏ dev-—Å—Ä–µ–¥)
if (!global.__processedEvents) {
	global.__processedEvents = new Set();
}
const processedEvents = global.__processedEvents;

const TTL = 5 * 60 * 1000;

function getEventFingerprint({ event, action, data }) {
	if (!data?.id) {
		console.log('‚ùó –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å fingerprint ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç data.id');
		return null;
	}

	const raw = [
		event,
		action,
		data.id,
		data.status,
		JSON.stringify((data.assignees || []).map(a => a.id).sort()), // —Ç–æ–ª—å–∫–æ ID
	].join('::');

	const hash = crypto.createHash('md5').update(raw).digest('hex');
	console.log(`üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω fingerprint: ${hash} ‚Üê (${raw})`);
	return hash;
}

function isDuplicateEvent(payload) {
	const fingerprint = getEventFingerprint(payload);
	if (!fingerprint) return false;

	if (processedEvents.has(fingerprint)) {
		console.log(`‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç —Å–æ–±—ã—Ç–∏—è. –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏: ${fingerprint}`);
		return true;
	}

	console.log(`üÜï –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ. –°–æ—Ö—Ä–∞–Ω—è–µ–º fingerprint: ${fingerprint}`);
	processedEvents.add(fingerprint);

	setTimeout(() => {
		console.log(`üßπ –£–¥–∞–ª—è–µ–º fingerprint –∏–∑ –ø–∞–º—è—Ç–∏: ${fingerprint}`);
		processedEvents.delete(fingerprint);
	}, TTL);

	return false;
}

module.exports = {
	isDuplicateEvent,
	getEventFingerprint,
};
