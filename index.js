const express = require('express');
const axios = require('axios');
const bodyParser = require('body-parser');
const crypto = require('crypto');
require('dotenv').config();

const config = {
	telegramToken: process.env.TELEGRAM_TOKEN,
	webhookPath: process.env.WEBHOOK_PATH,
	port: process.env.PORT,
	chatId: process.env.CHAT_ID,
	webhookSecret: process.env.WEBHOOK_SECRET
};

console.log('Loaded ENV:', {
	TELEGRAM_TOKEN: config.telegramToken,
	CHAT_ID: config.chatId,
	WEBHOOK_SECRET: config.webhookSecret,
	PORT: config.port,
	WEBHOOK_PATH: config.webhookPath
});

const app = express();
app.use(
	config.webhookPath,
	express.raw({ type: 'application/json' })
);

function verifySignature(req) {
	const signature = req.headers['x-plane-signature'];
	const payload = req.body;

	const expectedSignature = crypto
		.createHmac('sha256', config.webhookSecret)
		.update(payload)
		.digest('hex');

	return crypto.timingSafeEqual(Buffer.from(signature), Buffer.from(expectedSignature));
}

function formatIssueMessage(action, data) {
	const description =
		typeof data.description === 'object'
			? JSON.stringify(data.description, null, 2)
			: data.description || 'N/A';

	let title;
	switch (action) {
		case 'created':
			title = 'üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞';
			break;
		case 'updated':
			title = '‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏';
			break;
		case 'deleted':
			title = 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞';
			break;
		default:
			title = `*ISSUE* ‚Äî (${action})`;
	}

	return `${title}
*ID:* ${data.identifier}
*–ù–∞–∑–≤–∞–Ω–∏–µ:* ${data.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}

*–û–ø–∏—Å–∞–Ω–∏–µ:* ${description}`;
}

function formatCommentMessage(action, data) {
	const content =
		typeof data.content === 'object'
			? JSON.stringify(data.content, null, 2)
			: data.content || '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–µ–∑ —Ç–µ–∫—Å—Ç–∞';

	let title;
	switch (action) {
		case 'created':
			title = 'üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π';
			break;
		case 'updated':
			title = '‚úèÔ∏è –û–±–Ω–æ–≤–ª—ë–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π';
			break;
		case 'deleted':
			title = 'üóëÔ∏è –£–¥–∞–ª—ë–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π';
			break;
		default:
			title = `*COMMENT* (${action})`;
	}

	return `${title}
*–ê–≤—Ç–æ—Ä:* ${data.created_by?.name || 'N/A'}
*–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:* ${content}`;
}


// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(text) {
	const url = `https://api.telegram.org/bot${config.telegramToken}/sendMessage`;

	try {
		const response = await axios.post(url, {
			chat_id: config.chatId,
			text: text,
			parse_mode: 'Markdown'
		});

		console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', response.data);
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.response?.data || error.message);
		throw error;
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
app.post(config.webhookPath, async (req, res) => {
	console.log('–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫:', req.headers, req.body);

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
	if (!verifySignature(req)) {
		return res.status(403).send('–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å');
	}

	try {
		const parsedBody = JSON.parse(req.body.toString());
		const { event, action, data } = parsedBody;


		let message;

		switch (event) {
			case 'issue':
				message = formatIssueMessage(action, data);
				break;
			case 'issue_comment':
				message = formatCommentMessage(action, data);
				break;
			default:
				message = `üö´ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: *${event}*`;
		}

		await sendTelegramMessage(message);
		res.status(200).send('–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
		res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞');
	}
});

module.exports = app;

