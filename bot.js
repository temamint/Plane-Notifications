const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();
const { saveTelegramUserInfo } = require('./utils/userService');
const { getIssueDetailsMessage, getAllDetailsMessage } = require('./utils/botNotificationFormatter');
const { getNotificationByIssueId } = require('./utils/notificationBuffer');
const { sendTelegramMessage } = require('./utils/telegram');

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

console.log('–ë–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç...');

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
bot.on('message', (msg) => {
	const user = msg.from;
	saveTelegramUserInfo(user);

	console.log(`üì• –ù–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username || user.first_name} (${user.id})`);

	bot.sendMessage(user.id, '‚úÖ –Ø —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏–ª. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –∞–¥–º–∏–Ω —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Plane.');
});

bot.on('callback_query', async (query) => {
	const chatId = query.message.chat.id;
	const messageId = query.message.message_id;
	const data = query.data;

	console.log(`[callback_query] Received callback: chatId=${chatId}, messageId=${messageId}, data="${data}"`);

	try {
		if (data.startsWith('detail_')) {
			// detail_{issueId}_{issueKey}
			const detailParts = data.split('_');
			const issueId = detailParts[1];
			const issueKey = detailParts.slice(2).join('_') || 'unknown';
			console.log(`[callback_query] Processing detail_ for issueId: ${issueId}, issueKey: ${issueKey}`);
			const notif = await getNotificationByIssueId(issueId);
			if (!notif || !notif.project_id) {
				await bot.editMessageText('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', {
					chat_id: chatId,
					message_id: messageId,
					parse_mode: 'Markdown'
				});
				return;
			}
			const msg = await getIssueDetailsMessage(notif.project_id, issueId);
			console.log(`[callback_query] getIssueDetailsMessage result: ${msg.substring(0, 100)}...`);

			// –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–Ω–æ–ø–∫–∏
			const issueUrl = `https://app.plane.so/${process.env.PLANE_WORKSPACE_SLUG}/browse/${issueKey}/`;
			const replyMarkup = {
				inline_keyboard: [
					[
						{ text: '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º', callback_data: `mark_read_${issueId}` }
					],
					[
						{ text: '–û—Ç–∫—Ä—ã—Ç—å', url: issueUrl },
						{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_notifications' }
					]
				]
			};

			await bot.editMessageText(
				`üìÑ __**–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞—á–∏ ${issueKey}:**__\n\n${msg}`,
				{
					chat_id: chatId,
					message_id: messageId,
					parse_mode: 'Markdown',
					reply_markup: replyMarkup
				}
			);
			console.log(`[callback_query] Detail message edited for chatId: ${chatId}`);
		}

		if (data.startsWith('mark_read_')) {
			const issueId = data.split('_')[2];
			console.log(`[callback_query] Marking notification as read for issueId: ${issueId}`);
			// –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ 'readed'
			const { markNotificationAsReaded } = require('./utils/notificationBuffer');
			await markNotificationAsReaded(chatId, issueId);
			await bot.editMessageText('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ.', {
				chat_id: chatId,
				message_id: messageId
			});
			return;
		}

		if (data === 'mark_all_read_confirm') {
			const replyMarkup = {
				inline_keyboard: [
					[
						{ text: '–î–∞, –æ—Ç–º–µ—Ç–∏—Ç—å –≤—Å—ë', callback_data: 'mark_all_read' },
						{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'back_to_notifications' }
					]
				]
			};
			await bot.editMessageText('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ?', {
				chat_id: chatId,
				message_id: messageId,
				reply_markup: replyMarkup
			});
			return;
		}

		if (data === 'mark_all_read') {
			console.log(`[callback_query] Marking all notifications as read for chatId: ${chatId}`);
			// –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ 'readed'
			const { markAllNotificationsAsReaded } = require('./utils/notificationBuffer');
			await markAllNotificationsAsReaded(chatId);
			await bot.editMessageText('‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ.', {
				chat_id: chatId,
				message_id: messageId
			});
			return;
		}

		if (data === 'back_to_notifications' || data === 'view_all') {
			console.log(`[callback_query] Processing view_all/back_to_notifications for chatId: ${chatId}`);

			const msg = await getAllDetailsMessage(chatId);
			console.log(`[callback_query] getAllDetailsMessage result: ${msg.substring(0, 100)}...`);

			await bot.editMessageText(msg, {
				chat_id: chatId,
				message_id: messageId,
				parse_mode: 'Markdown'
			});
			console.log(`[callback_query] View all message edited for chatId: ${chatId}`);
		}

		if (data === 'close_summary') {
			console.log(`[callback_query] Processing close_summary for chatId: ${chatId}, messageId: ${messageId}`);

			await bot.deleteMessage(chatId, messageId);
			console.log(`[callback_query] Summary message deleted for chatId: ${chatId}`);
		}

		// –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
		try {
			await bot.answerCallbackQuery(query.id);
			console.log(`[callback_query] Callback query answered for chatId: ${chatId}`);
		} catch (err) {
			if (err.message.includes('query is too old') || err.message.includes('query ID is invalid')) {
				console.warn(`[callback_query] ‚ö†Ô∏è Callback query expired for chatId: ${chatId}, data: "${data}"`);
			} else {
				console.error(`[callback_query] ‚ùå Error answering callback query for chatId: ${chatId}:`, err.message);
			}
		}
	} catch (err) {
		console.error(`[callback_query] ‚ùå Error processing callback for chatId: ${chatId}, data: "${data}":`, err.message);
		try {
			await bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ üò¢' });
		} catch (answerErr) {
			if (!answerErr.message.includes('query is too old') && !answerErr.message.includes('query ID is invalid')) {
				console.error(`[callback_query] ‚ùå Error answering callback query on error for chatId: ${chatId}:`, answerErr.message);
			}
		}
	}
});

module.exports = bot;
